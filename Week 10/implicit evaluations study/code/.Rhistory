# combine both into one table
bind_rows(dat_mean_ratings,
dat_mean_ratings_by_gender) |>
select(Subset = group, Mean, SD, n) |> # select variables of interest, and rename one
mutate(Subset = stringr::str_to_sentence(Subset)) |> # Change the case of the Subset variable so that it prints nicely
mutate_if(is.numeric, round_half_up, digits = 2) |>
kable() |>
add_header_above(header = c(" " = 1, "Self-reported evaluations" = 3)) |>
kable_classic(full_width = FALSE)
ggplot(data_processed_after_exclusions, aes(x = mean_evaluation)) +
geom_histogram(binwidth = 0.05,
boundary = 0,
fill = viridis_pal(begin = 0.45, option = "mako")(1),
color = viridis_pal(begin = 0.30, option = "mako")(1)) +
xlab("Mean self-reported evaluation") +
ylab("Frequency") +
theme_linedraw() +
scale_x_continuous(breaks = pretty_breaks(n = 10))
### Descriptive stats
# all self evluations
dat_mean_ratings <- data_processed_after_exclusions |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n()) |>
mutate(group = "Full sample")
# by gender
dat_mean_ratings_by_gender <- data_processed_after_exclusions |>
group_by(group = gender) |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n())
# combine
bind_rows(dat_mean_ratings,
dat_mean_ratings_by_gender) |>
select(Subset = group, Mean, SD, n) |>
mutate(Subset = stringr::str_to_sentence(Subset)) |>
mutate_if(is.numeric, round_half_up, digits = 2) |>
kable() |>
add_header_above(header = c(" " = 1, "AMP evaluation" = 3)) |>
kable_classic(full_width = FALSE)
ggplot(data_processed_after_exclusions, aes(x = AMP_score)) +
geom_histogram(binwidth = 0.05,
boundary = 0,
fill = viridis_pal(begin = 0.45, option = "mako")(1),
color = viridis_pal(begin = 0.30, option = "mako")(1)) +
xlab("AMP score") +
ylab("Frequency") +
theme_linedraw() +
scale_x_continuous(breaks = pretty_breaks(n = 10))
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
install.packages("devtools")
ggplot(data_processed_after_exclusions,
aes(y = AMP_score,
x = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
ylab("AMP score") +
xlab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
scatterplotv1 <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
colour = gender)) +
geom_jitter(alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation")
ggMarginal(scatterplotv1, groupColour = TRUE, groupFill = TRUE, type = "histogram")
print(scatterplotv1)
library(viridis) # If you are using viridis for color scales
install.packages("ggrepel")
library(ggrepel)
z_threshold = 2
pointslabeldgraph <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score, y = mean_evaluation, label = subject)) + # Add label aesthetic
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
#geom_text_repel() + # Add this line for labels
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
pointslabeldgraph + geom_text_repel(data = filter(data_processed_after_exclusions, abs(scale(AMP_score)) > z_threshold),
aes(label = subject))
# Load necessary libraries
library(ggplot2)
remotes::install_github("hughjonesd/ggmagnify")
library(ggmagnify)
library(viridis)
# Your original scatter plot
ggp <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1), alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
# Define the area to be magnified
# Adjust these values to the area you want to zoom in on
from <- c(xmin = 0.3, xmax = 0.8, ymin = 0.8, ymax = 1.3)
# Define where to place the magnified inset on the plot
# Adjust these values to place the inset where you like
to <- c(xmin = 0, xmax = 0.25, ymin = 4, ymax = 5)
# Add the magnified area to the plot
ggp + geom_magnify(from = from, to = to)
###is it possible to have a square automatically?
install.packages("ggrepel")
#split histogram
# Create the base plot
splithistogramv1 <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = gender)) +
geom_histogram(position = "dodge", binwidth = 0.15) + # Adjust binwidth as needed
facet_grid(. ~ gender) + # Splitting the histogram by gender
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_minimal()
# Add marginal histograms (if needed)
# ggMarginal(p1, groupColour = TRUE, groupFill = TRUE, type = "histogram")
# Print the plot
print(splithistogramv1)
# Create the split violin plot
splitviolinv1 <- ggplot(data_processed_after_exclusions, aes(x = gender, y = AMP_score, fill = gender)) +
geom_violin(scale = "area", trim = FALSE) + # Violin plot
geom_boxplot(width = 0.1, fill = "white") + # Add a boxplot inside the violin
facet_wrap(~gender, scales = "free_x") + # Splitting by gender
xlab("Gender") +
ylab("AMP Score") +
theme_minimal()
# Print the plot
print(splitviolinv1)
# Load necessary libraries
library(ggplot2)
install.packages("ggbeeswarm")
library(ggbeeswarm) # for geom_quasirandom
# Create the raincloud plot
raincloudplotv1 <- ggplot(data_processed_after_exclusions, aes(x = gender, y = AMP_score, fill = gender)) +
# Add a half violin plot
geom_violin(trim = FALSE, scale = "area", adjust = 1.5, alpha = 0.5) +
# Add the boxplot
geom_boxplot(width = 0.1, outlier.shape = NA, alpha = 0.5) +
# Add points
geom_quasirandom(aes(color = gender), size = 2, alpha = 0.5, show.legend = FALSE) +
# Customizations
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2") +
labs(x = "Gender", y = "AMP Score") +
theme_minimal()
# Print the plot
print(raincloudplotv1)
install.packages("ggbeeswarm")
# Modify the plot
splithistogramv2 <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = factor(gender, levels = c("Women", "Men")))) +
geom_histogram(position = "dodge", binwidth = 0.15) +
facet_grid(. ~ gender) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_minimal() +
scale_fill_manual(values = c("Men" = "color1", "Women" = "color2"), labels = c("Men", "Women"))
# Print the plot
print(splithistogramv2)
# Modify the plot
splithistogramv2 <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = factor(gender, levels = c("Women", "Men")))) +
geom_histogram(position = "dodge", binwidth = 0.15) +
facet_grid(. ~ gender) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_minimal() +
scale_fill_manual(values = c("Men" = "BLUE", "Women" = "RED"), labels = c("Men", "Women"))
# Print the plot
print(splithistogramv2)
# Modify the plot
splithistogramv2 <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = factor(gender, levels = c("Women", "Men")))) +
geom_histogram(position = "dodge", binwidth = 0.15) +
facet_grid(. ~ gender) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_minimal() +
scale_fill_manual(values = c("Men" = "#FF5733", "Women" = "RED"), labels = c("Men", "Women"))
# Modify the plot
splithistogramv2 <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = factor(gender, levels = c("Women", "Men")))) +
geom_histogram(position = "dodge", binwidth = 0.15) +
facet_grid(. ~ gender) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_minimal() +
scale_fill_manual(values = c("Men" = "#FF5733", "Women" = "B06161"), labels = c("Men", "Women"))
# Modify the plot
splithistogramv2 <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = factor(gender, levels = c("Women", "Men")))) +
geom_histogram(position = "dodge", binwidth = 0.15) +
facet_grid(. ~ gender) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_minimal() +
scale_fill_manual(values = c("Men" = "#FF5733", "Women" = "#B06161"), labels = c("Men", "Women"))
# Print the plot
print(splithistogramv2)
# Print the plot
print(splithistogramv2)
# Modify the plot
splithistogramv2 <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = factor(gender, levels = c("Women", "Men")))) +
geom_histogram(position = "dodge", binwidth = 0.15) +
facet_grid(. ~ gender) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_minimal() +
scale_fill_manual(values = c("Men" = "#FF5733", "Women" = "#B06161"), labels = c("Men", "Women"))
# Print the plot
print(splithistogramv2)
# Modify the plot
splithistogramv2 <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = factor(gender, levels = c("Women", "Men")))) +
geom_histogram(position = "dodge", binwidth = 0.15) +
facet_grid(. ~ gender) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_minimal() +
scale_fill_manual(values = c("Men" = "#7ED7C1", "Women" = "#B06161"), labels = c("Men", "Women"))
# Print the plot
print(splithistogramv2)
View(data_processed_after_exclusions)
# Modify the plot
splithistogramv2 <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = factor(gender, levels = c("Women", "Men")))) +
geom_histogram(position = "dodge", binwidth = 0.15) +
facet_grid(. ~ gender) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_minimal() +
scale_fill_manual(values = c("Men" = "#7ED7C1", "Women" = "#B06161"), labels = c("Men", "Women"))
# Print the plot
print(splithistogramv2)
splithistogramv2 <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = factor(gender, levels = c("men", "women", "nonbinary")))) +
geom_histogram(position = "dodge", binwidth = 0.15) + # Adjust binwidth as needed
facet_grid(. ~ gender) + # Splitting the histogram by gender
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_minimal() +
scale_fill_manual(values = c("men" = "color_for_men", "women" = "color_for_women", "nonbinary" = "color_for_nonbinary"),
labels = c("Men", "Women", "Nonbinary")) # Capitalize legend labels and set colors
# Print the plot
print(splithistogramv2)
splithistogramv2 <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = factor(gender, levels = c("men", "women", "nonbinary")))) +
geom_histogram(position = "dodge", binwidth = 0.15) + # Adjust binwidth as needed
facet_grid(. ~ gender) + # Splitting the histogram by gender
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_minimal() +
scale_fill_manual(values = c("men" = "#7ED7C1", "women" = "#B06161", "nonbinary" = "#F0DBAF"),
labels = c("Men", "Women", "Nonbinary")) # Capitalize legend labels and set colors
# Print the plot
print(splithistogramv2)
splithistogramv2 <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = factor(gender, levels = c("men", "women", "nonbinary")))) +
geom_histogram(position = "dodge", binwidth = 0.15) + # Adjust binwidth as needed
facet_grid(. ~ gender) + # Splitting the histogram by gender
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_minimal() +
scale_fill_manual(values = c("men" = "#7ED7C1", "women" = "#B06161", "nonbinary" = "#F0DBAF"),
labels = c("Men", "Women", "Nonbinary")) # Capitalize legend labels and set colors
# Print the plot
print(splithistogramv2)
splithistogramv2 <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = factor(gender, levels = c("men", "women", "nonbinary")))) +
geom_histogram(position = "dodge", binwidth = 0.15) + # Adjust binwidth as needed
facet_grid(. ~ gender) + # Splitting the histogram by gender
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_minimal() +
scale_fill_manual(values = c("men" = "#R32323", "women" = "#B06161", "nonbinary" = "#F0DBAF"),
labels = c("Men", "Women", "Nonbinary"))
# Print the plot
print(splithistogramv2)
library(viridis)
splithistogramv2 <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = factor(gender, levels = c("men", "women", "nonbinary")))) +
geom_histogram(position = "dodge", binwidth = 0.15) + # Adjust binwidth as needed
facet_grid(. ~ gender) + # Splitting the histogram by gender
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_minimal() +
scale_fill_viridis_d(option = "D", begin = 0.2, end = 0.8, direction = -1, labels = c("Men", "Women", "Nonbinary"))
# Print the plot
print(splithistogramv2)
splithistogramv2 <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = factor(gender, levels = c("men", "women", "nonbinary")))) +
geom_histogram(position = "dodge", binwidth = 0.15) + # Adjust binwidth as needed
facet_grid(. ~ gender) + # Splitting the histogram by gender
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_minimal() +
scale_fill_viridis_d(direction = -1, labels = c("Men", "Women", "Nonbinary"))
# Print the plot
print(splithistogramv2)
splithistogramv2 <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = factor(gender, levels = c("men", "women", "nonbinary")))) +
geom_histogram(position = "dodge", binwidth = 0.15) + # Adjust binwidth as needed
facet_grid(. ~ gender) + # Splitting the histogram by gender
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_minimal() +
scale_fill_viridis_d(direction = -2, labels = c("Men", "Women", "Nonbinary"))
# Print the plot
print(splithistogramv2)
splithistogramv2 <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = factor(gender, levels = c("men", "women", "nonbinary")))) +
geom_histogram(position = "dodge", binwidth = 0.15) + # Adjust binwidth as needed
facet_grid(. ~ gender) + # Splitting the histogram by gender
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_minimal() +
scale_fill_viridis_d(direction = -1, labels = c("Men", "Women", "Nonbinary"))
# Print the plot
print(splithistogramv2)
splithistogramv2 <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = gender)) +
geom_histogram(position = "dodge", binwidth = 0.15) + # Adjust binwidth as needed
facet_grid(. ~ gender) + # Splitting the histogram by gender
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
scale_fill_manual(values = c("male" = "blue", "female" = "pink", "nonbinary" = "green"),
labels = c("Men", "Women", "Nonbinary"),
breaks = c("male", "female", "nonbinary")) +
theme_minimal()
# Print the plot
print(splithistogramv2)
splithistogramv2 <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = gender)) +
geom_histogram(position = "dodge", binwidth = 0.15) + # Adjust binwidth as needed
facet_grid(. ~ gender) + # Splitting the histogram by gender
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
scale_fill_manual(values = c("male" = "blue", "female" = "pink", "nonbinary" = "green"),
labels = c("Men", "Women", "Nonbinary"),
breaks = c("Male", "Female", "Nonbinary")) +
theme_minimal()
# Print the plot
print(splithistogramv2)
m
splithistogramv2 <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = gender)) +
geom_histogram(position = "dodge", binwidth = 0.15) + # Adjust binwidth as needed
facet_grid(. ~ gender) + # Splitting the histogram by gender
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
scale_fill_manual(values = c("male" = "blue", "female" = "pink", "nonbinary" = "green"),
labels = c("Men", "Women", "Nonbinary"),
breaks = c("male", "female", "nonbinary")) +
theme_minimal()
# Print the plot
print(splithistogramv2)
ggMarginal(splithistogramv2, groupColour = TRUE, groupFill = TRUE, type = "histogram")
splithistogramv2 <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, fill = gender)) +
geom_histogram(position = "dodge", binwidth = 0.15) + # Adjust binwidth as needed
facet_grid(. ~ gender) + # Splitting the histogram by gender
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
scale_fill_manual(values = c("male" = "blue", "female" = "red", "nonbinary" = "green"),
labels = c("Men", "Women", "Nonbinary"),
breaks = c("male", "female", "nonbinary")) +
theme_minimal()
# Print the plot
print(splithistogramv2)
install.packages("patchwork")
library(patchwork)
# Combine the plots
combined_plot <- splithistogramv1 / splitviolinv1 / raincloudplotv1
# Print the combined plot
print(combined_plot)
# Save as PNG with 300 DPI
ggsave("combined_plot.png", plot = combined_plot, dpi = 300)
# Save as PDF
ggsave("combined_plot.pdf", plot = combined_plot)
# Load necessary libraries
library(report)
library(dplyr)
library(stringr)
library(knitr)
# Load necessary libraries
install.packages("report")
library(report)
library(dplyr)
library(stringr)
library(knitr)
# Calculate means and standard deviations
dat_mean_ratings <- data_processed_after_exclusions %>%
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n()) %>%
mutate(group = "Full sample")
dat_mean_ratings_by_gender <- data_processed_after_exclusions %>%
group_by(group = gender) %>%
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n())
combined_ratings <- bind_rows(dat_mean_ratings, dat_mean_ratings_by_gender) %>%
select(Subset = group, Mean, SD, n) %>%
mutate(Subset = str_to_sentence(Subset)) %>%
mutate_if(is.numeric, round_half_up, digits = 2) %>%
kable() %>%
add_header_above(header = c(" " = 1, "AMP evaluation" = 3)) %>%
kable_classic(full_width = FALSE)
# Run the t-test
t_test_result <- t.test(mean_evaluation ~ gender, data = data_processed_after_exclusions)
# Filter out nonbinary data
data_filtered <- data_processed_after_exclusions %>%
filter(gender %in% c("male", "female"))
# Run the t-test with filtered data
t_test_result <- t.test(mean_evaluation ~ gender, data = data_filtered)
# Generate the report
result_report <- report::report(t_test_result)
# Generate the report
result_report <- report::report(t_test_result)
# Print the report
print(result_report)
# Print the report
print(result_report)
## Combining plots
# Run ANOVA
anova_result <- aov(mean_evaluation ~ gender, data = data_processed_after_exclusions)
# Generate the report
result_report <- report::report(anova_result)
# Print the report
print(result_report)
# Pairwise t-tests
pairwise_results <- pairwise.t.test(data_processed_after_exclusions$mean_evaluation,
data_processed_after_exclusions$gender,
p.adjust.method = "bonferroni")
# Print the results
print(pairwise_results)
# Print the report
print(result_report)
# Print the report
print(result_report)
# Filter out nonbinary data
data_filtered <- data_processed_after_exclusions %>%
filter(gender %in% c("male", "female"))
# Run the t-test with filtered data
t_test_result <- t.test(mean_evaluation ~ gender, data = data_filtered)
# Generate the report
result_report <- report::report(t_test_result)
# Print the report
print(result_report)
# Run ANOVA
anova_result <- aov(mean_evaluation ~ gender, data = data_processed_after_exclusions)
# Generate the report
result_report <- report::report(anova_result)
# Print the report
print(result_report)
# Pairwise t-tests
pairwise_results <- pairwise.t.test(data_processed_after_exclusions$mean_evaluation,
data_processed_after_exclusions$gender,
p.adjust.method = "bonferroni")
# Print the results
print(pairwise_results)
library(dplyr)
library(report)
# Filter data for male and female
data_male_female <- data_processed %>%
filter(gender %in% c("male", "female")) %>%
na.omit()
# Run the t-test
t_test_result <- t.test(mean_evaluation ~ gender, data = data_male_female, var.equal = FALSE)
# Generate the report
t_test_report <- report::report(t_test_result)
# Print the report
print(t_test_report)
# Filter data to include nonbinary
data_all_genders <- data_processed %>%
filter(gender %in% c("male", "female", "nonbinary")) %>%
na.omit()
# Run ANOVA
anova_result <- aov(mean_evaluation ~ gender, data = data_all_genders)
# Generate the report
anova_report <- report::report(anova_result)
# Print the report
print(anova_report)
# Run Kruskal-Wallis Test
kruskal_result <- kruskal.test(mean_evaluation ~ gender, data = data_all_genders)
# Generate the report
kruskal_report <- report::report(kruskal_result)
# Run Kruskal-Wallis Test
kruskal_result <- kruskal.test(mean_evaluation ~ gender, data = data_all_genders)
# Generate the report
kruskal_report <- report::report(kruskal_result)
# Print the report
print(kruskal_report)
install.packages("effectsize")
install.packages("effectsize")
library(effectsize)
# Run Kruskal-Wallis Test
kruskal_result <- kruskal.test(mean_evaluation ~ gender, data = data_all_genders)
# Compute the effect size
effect_size <- rank_epsilon_squared(kruskal_result)
# Print the Kruskal-Wallis test result and effect size
print(kruskal_result)
print(effect_size)
# Compute the effect size
effect_size <- rank_epsilon_squared(kruskal_result)
