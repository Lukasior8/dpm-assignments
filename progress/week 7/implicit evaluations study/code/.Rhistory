summary(trial_counts$num_trials)
data_processed <- read_csv("../data/processed/data_processed.csv")
data_processed_after_exclusions <- data_processed |>
filter(exclude_participant == "include")
open(data_processed)
View(data_processed_after_exclusions)
# in case this dir doesn't exist, create it
dir.create("../../../data/processed/")
# save data to disk in that dir
write_csv(data_processed, "../../../data/processed/data_processed.csv")
# in case this dir doesn't exist, create it
dir.create("../../../data/processed/")
# save data to disk in that dir
write_csv(data_processed, "../../../data/processed/data_processed.csv")
# in case this dir doesn't exist, create it
dir.create("../data/processed/")
# save data to disk in that dir
write_csv(data_processed, "../data/processed/data_processed.csv")
# save data to disk in that dir
write_csv(data_processed, "../data/processed/data_processed.csv")
# save data to disk in that dir
write_csv(data_processed, "../data/processed/data_processed.csv")
# in case this dir doesn't exist, create it
dir.create("../data/processed/")
# save data to disk in that dir
write_csv(data_processed, "../data/processed/data_processed.csv")
View(data_amp_performance_criteria)
View(data_amp_raw)
View(data_amp_performance_criteria)
View(data_amp_raw)
# 1. Exploring the Number of Trials:
# Firstly, we'll filter the data for non-practice trials and then explore the number of trials for each subject.
#
# R
# Copy code
library(dplyr)
# Filter data for non-practice trials and count the number of trials for each subject
trial_counts <- data_amp_raw %>%
filter(blockcode != "practice",
trialcode != "instructions") %>%
group_by(subject) %>%
summarise(num_trials = n())
View(trial_counts)
# Summary of trial counts
summary(trial_counts$num_trials)
# 2. Visualizing the Number of Trials:
# A histogram will allow us to visually inspect the distribution of trial counts.
#
# R
# Copy code
library(ggplot2)
ggplot(trial_counts, aes(x=num_trials)) +
geom_histogram(binwidth=1) +
theme_minimal() +
labs(title="Distribution of AMP Task Trials per Subject",
x="Number of Trials",
y="Number of Subjects")
# 3. Identifying the Common Trial Count:
# By finding the mode, we can ascertain the most frequent trial count.
#
# R
# Copy code
common_trial_count <- as.numeric(names(which.max(table(trial_counts$num_trials))))
common_trial_count
data_amp_performance_criteria <- data_amp_raw %>%
filter(blockcode != "practice",
trialcode != "instructions") %>%
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE)) %>%
group_by(subject) %>%
mutate(num_trials = n()) %>%
summarize(proportion_fast_trials_amp = mean(latency_prob)) %>%
mutate(exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10 | num_trials != common_trial_count, "exclude", "include"))
data_amp_performance_criteria
data_amp_performance_criteria <- data_amp_raw %>%
filter(blockcode != "practice",
trialcode != "instructions") %>%
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE)) %>%
group_by(subject) %>%
mutate(num_trials = n()) %>%
summarize(proportion_fast_trials_amp = mean(latency_prob),
total_trials = first(num_trials)) %>%
mutate(exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10 | total_trials != common_trial_count, "exclude", "include"))
data_amp_performance_criteria <- data_amp_raw %>%
filter(blockcode != "practice",
trialcode != "instructions") %>%
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE)) %>%
group_by(subject) %>%
mutate(num_trials = n()) %>%
summarize(proportion_fast_trials_amp = mean(latency_prob),
total_trials = first(num_trials)) %>%
mutate(exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10 | total_trials != common_trial_count, "exclude", "include"))
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(tidyverse)
library(janitor) # for clean_names()
library(stringr)
# demographics
data_demographics_raw <- read_csv("../data/raw/data_demographics_raw.csv") |>
janitor::clean_names()
# data_demographics_raw_messy <- read_csv("../../../data/raw/data_demographics_raw_messy.csv", skip = 2) |>
#   janitor::clean_names()
# self report measure
data_selfreport_raw <- read_csv("../data/raw/data_selfreport_raw.csv") |>
janitor::clean_names()
# affect attribution procedure
data_amp_raw <- read_csv("../data/raw/data_amp_raw.csv") |>
janitor::clean_names()
dat_age_gender <- data_demographics_raw |>
select(subject, date, time, trialcode, response) |>
pivot_wider(names_from = trialcode,
values_from = response) |>
mutate(gender = tolower(gender),
gender = stringr::str_remove_all(gender, regex("\\W+")), # regex is both very useful and awful to write
gender = case_when(gender == "female" ~ gender,
gender == "male" ~ gender,
gender == "nonbinary" ~ gender,
gender == "woman" ~ "female",
gender == "man" ~ "male",
TRUE ~ "other/missing/error"),
age = case_when(str_detect(age, "^[0-9]+$") ~ age, # if the value is only numbers, keep it.
TRUE ~ "other/missing/error"))
data_amp_performance_criteria <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE)) |>
group_by(subject) |>
summarize(proportion_fast_trials_amp = mean(latency_prob)) |>
mutate(exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10, "exclude", "include"))
# 1. Exploring the Number of Trials:
# Firstly, we'll filter the data for non-practice trials and then explore the number of trials for each subject.
#
# R
# Copy code
library(dplyr)
# Filter data for non-practice trials and count the number of trials for each subject
trial_counts <- data_amp_raw %>%
filter(blockcode != "practice",
trialcode != "instructions") %>%
group_by(subject) %>%
summarise(num_trials = n())
# Summary of trial counts
summary(trial_counts$num_trials)
# 2. Visualizing the Number of Trials:
# A histogram will allow us to visually inspect the distribution of trial counts.
#
# R
# Copy code
library(ggplot2)
ggplot(trial_counts, aes(x=num_trials)) +
geom_histogram(binwidth=1) +
theme_minimal() +
labs(title="Distribution of AMP Task Trials per Subject",
x="Number of Trials",
y="Number of Subjects")
# 3. Identifying the Common Trial Count:
# By finding the mode, we can ascertain the most frequent trial count.
#
# R
# Copy code
common_trial_count <- as.numeric(names(which.max(table(trial_counts$num_trials))))
common_trial_count
# 4. Incorporating the Exclusion Criterion:
# Now, we'll add the criterion to the existing data processing code to exclude subjects who do not have the correct number of trials.
#
data_amp_performance_criteria <- data_amp_raw %>%
filter(blockcode != "practice",
trialcode != "instructions") %>%
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE)) %>%
group_by(subject) %>%
mutate(num_trials = n()) %>%
summarize(proportion_fast_trials_amp = mean(latency_prob),
total_trials = first(num_trials)) %>%
mutate(exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10 | total_trials != common_trial_count, "exclude", "include"))
# Brief Description:
# To determine the correct number of trials for the AMP task, I started by filtering out practice trials and instructions. I then counted the number of trials for each subject. By visualizing this distribution with a histogram, I could observe the pattern of trial counts across subjects. The mode of this distribution, which represents the most common trial count, was assumed to be the correct number. This value was then incorporated into the data processing code, marking subjects with an incorrect trial count for exclusion.
#
data_amp_performance_criteria <- data_amp_raw %>%
filter(blockcode != "practice",
trialcode != "instructions") %>%
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE)) %>%
group_by(subject) %>%
mutate(num_trials = n()) %>%
summarize(proportion_fast_trials_amp = mean(latency_prob),
total_trials = first(num_trials)) %>%
mutate(exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10 | total_trials != common_trial_count, "exclude", "include"))
ggplot(trial_counts, aes(x=num_trials)) +
geom_histogram(binwidth=1) +
theme_minimal() +
labs(title="Distribution of AMP Task Trials per Subject",
x="Number of Trials",
y="Number of Subjects")
data_amp_performance_criteria <- data_amp_raw %>%
filter(blockcode != "practice",
trialcode != "instructions") %>%
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE)) %>%
group_by(subject) %>%
mutate(num_trials = n()) %>%
summarize(proportion_fast_trials_amp = mean(latency_prob),
total_trials = first(num_trials)) %>%
mutate(exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10 | total_trials != common_trial_count, "exclude", "include"))
View(data_amp_raw)
# Filter data for non-practice trials and count the number of trials for each subject
trial_counts <- data_amp_raw %>%
filter(blockcode != "practice",
trialcode != "instructions") %>%
group_by(subject) %>%
summarise(num_trials = n())
View(trial_counts)
# Summary of trial counts
summary(trial_counts$num_trials)
# 2. Visualizing the Number of Trials:
# A histogram will allow us to visually inspect the distribution of trial counts.
#
# R
# Copy code
library(ggplot2)
ggplot(trial_counts, aes(x=num_trials)) +
geom_histogram(binwidth=1) +
theme_minimal() +
labs(title="Distribution of AMP Task Trials per Subject",
x="Number of Trials",
y="Number of Subjects")
# 3. Identifying the Common Trial Count:
# By finding the mode, we can ascertain the most frequent trial count.
#
# R
# Copy code
common_trial_count <- as.numeric(names(which.max(table(trial_counts$num_trials))))
common_trial_count
data_amp_performance_criteria <- data_amp_raw %>%
filter(blockcode != "practice",
trialcode != "instructions") %>%
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE)) %>%
group_by(subject) %>%
mutate(num_trials = n()) %>%
summarize(proportion_fast_trials_amp = mean(latency_prob),
total_trials = first(num_trials)) %>%
mutate(exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10 | total_trials != common_trial_count, "exclude", "include"))
data_amp_performance_criteria <- data_amp_raw %>%
filter(blockcode != "practice",
trialcode != "instructions") %>%
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE)) %>%
group_by(subject) %>%
mutate(num_trials = n()) %>%
summarize(proportion_fast_trials_amp = mean(latency_prob),
total_trials = first(num_trials)) %>%
mutate(exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10 | total_trials != common_trial_count, "exclude", "include"))
data_amp_performance_criteria <- data_amp_raw %>%
filter(blockcode != "practice",
trialcode != "instructions") %>%
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE)) %>%
group_by(subject) %>%
mutate(num_trials = n()) %>%
summarize(proportion_fast_trials_amp = mean(latency_prob),
total_trials = first(num_trials)) %>%
mutate(exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10 | total_trials != common_trial_count, "exclude", "include"))
plot<- ggplot(trial_counts, aes(x=num_trials)) +
geom_histogram(binwidth=1) +
theme_minimal() +
labs(title="Distribution of AMP Task Trials per Subject",
x="Number of Trials",
y="Number of Subjects")
print(plot)
View(data_amp_performance_criteria)
common_trial_count
data_amp_performance_criteria <- data_amp_raw %>%
filter(blockcode != "practice",
trialcode != "instructions") %>%
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE)) %>%
group_by(subject) %>%
mutate(num_trials = n()) %>%
summarize(proportion_fast_trials_amp = mean(latency_prob),
total_trials = first(num_trials)) %>%
mutate(exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10 | total_trials != common_trial_count, "exclude", "include"))
View(data_amp_raw)
View(data_amp_performance_criteria)
View(data_amp_raw)
# Filter data for non-practice trials and count the number of trials for each subject
trial_counts <- data_amp_raw %>%
filter(blockcode != "practice",
trialcode != "instructions") %>%
group_by(subject) %>%
summarise(num_trials = n())
# Summary of trial counts
summary(trial_counts$num_trials)
# 2. Visualizing the Number of Trials:
# A histogram will allow us to visually inspect the distribution of trial counts.
#
# R
# Copy code
library(ggplot2)
plot<- ggplot(trial_counts, aes(x=num_trials)) +
geom_histogram(binwidth=1) +
theme_minimal() +
labs(title="Distribution of AMP Task Trials per Subject",
x="Number of Trials",
y="Number of Subjects")
print(plot)
# 3. Identifying the Common Trial Count:
# By finding the mode, we can ascertain the most frequent trial count.
#
# R
# Copy code
common_trial_count <- as.numeric(names(which.max(table(trial_counts$num_trials))))
common_trial_count
data_amp_performance_criteria <- data_amp_raw %>%
filter(blockcode != "practice",
trialcode != "instructions") %>%
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE)) %>%
group_by(subject) %>%
mutate(num_trials = n()) %>%
summarize(proportion_fast_trials_amp = mean(latency_prob),
total_trials = first(num_trials)) %>%
mutate(exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10 | total_trials != common_trial_count, "exclude", "include"))
# Filter data for non-practice trials and count the number of trials for each subject
trial_counts <- data_amp_raw %>%
group_by(subject) %>%
summarise(num_trials = n())
# Summary of trial counts
summary(trial_counts$num_trials)
# 2. Visualizing the Number of Trials:
# A histogram will allow us to visually inspect the distribution of trial counts.
#
# R
# Copy code
library(ggplot2)
plot<- ggplot(trial_counts, aes(x=num_trials)) +
geom_histogram(binwidth=1) +
theme_minimal() +
labs(title="Distribution of AMP Task Trials per Subject",
x="Number of Trials",
y="Number of Subjects")
print(plot)
# 3. Identifying the Common Trial Count:
# By finding the mode, we can ascertain the most frequent trial count.
#
# R
# Copy code
common_trial_count <- as.numeric(names(which.max(table(trial_counts$num_trials))))
common_trial_count
data_amp_performance_criteria <- data_amp_raw %>%
filter(blockcode != "practice",
trialcode != "instructions") %>%
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE)) %>%
group_by(subject) %>%
mutate(num_trials = n()) %>%
summarize(proportion_fast_trials_amp = mean(latency_prob),
total_trials = first(num_trials)) %>%
mutate(exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10 | total_trials != common_trial_count, "exclude", "include"))
data_amp_performance_criteria <- data_amp_raw %>%
# filter(blockcode != "practice",
#        trialcode != "instructions") %>%
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE)) %>%
group_by(subject) %>%
mutate(num_trials = n()) %>%
summarize(proportion_fast_trials_amp = mean(latency_prob),
total_trials = first(num_trials)) %>%
mutate(exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10 | total_trials != common_trial_count, "exclude", "include"))
View(trial_counts)
library(dplyr)
# Filter data for non-practice trials and count the number of trials for each subject
trial_counts <- data_amp_raw %>%
# filter(blockcode != "practice",
#        trialcode != "instructions") %>%
group_by(subject) %>%
summarise(num_trials = n())
# Summary of trial counts
summary(trial_counts$num_trials)
# 2. Visualizing the Number of Trials:
# A histogram will allow us to visually inspect the distribution of trial counts.
#
# R
# Copy code
library(ggplot2)
plot<- ggplot(trial_counts, aes(x=num_trials)) +
geom_histogram(binwidth=1) +
theme_minimal() +
labs(title="Distribution of AMP Task Trials per Subject",
x="Number of Trials",
y="Number of Subjects")
print(plot)
# 3. Identifying the Common Trial Count:
# By finding the mode, we can ascertain the most frequent trial count.
#
# R
# Copy code
common_trial_count <- as.numeric(names(which.max(table(trial_counts$num_trials))))
common_trial_count
data_amp_performance_criteria <- data_amp_raw %>%
# filter(blockcode != "practice",
#        trialcode != "instructions") %>%
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE)) %>%
group_by(subject) %>%
mutate(num_trials = n()) %>%
summarize(proportion_fast_trials_amp = mean(latency_prob),
total_trials = first(num_trials)) %>%
mutate(exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10 | total_trials != common_trial_count, "exclude", "include"))
View(data_amp_performance_criteria)
data_amp_performance_criteria <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE)) |>
group_by(subject) |>
summarize(proportion_fast_trials_amp = mean(latency_prob)) |>
mutate(exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10, "exclude", "include"))
#assignment week 7 (2)solution with the help of chatgpt:
# 1. Exploring the Number of Trials:
# Firstly, we'll filter the data for non-practice trials and then explore the number of trials for each subject.
library(dplyr)
# Filter data for non-practice trials and count the number of trials for each subject
trial_counts <- data_amp_raw %>%
filter(blockcode != "practice",
trialcode != "instructions") %>%
group_by(subject) %>%
summarise(num_trials = n())
# Summary of trial counts
summary(trial_counts$num_trials)
# 2. Visualizing the Number of Trials:
# A histogram will allow us to visually inspect the distribution of trial counts.
#
# R
# Copy code
library(ggplot2)
plot<- ggplot(trial_counts, aes(x=num_trials)) +
geom_histogram(binwidth=1) +
theme_minimal() +
labs(title="Distribution of AMP Task Trials per Subject",
x="Number of Trials",
y="Number of Subjects")
print(plot)
# 3. Identifying the Common Trial Count:
# By finding the mode, we can ascertain the most frequent trial count.
#
# R
# Copy code
common_trial_count <- as.numeric(names(which.max(table(trial_counts$num_trials))))
common_trial_count
# 4. Incorporating the Exclusion Criterion:
# Now, we'll add the criterion to the existing data processing code to exclude subjects who do not have the correct number of trials.
#
data_amp_performance_criteria <- data_amp_raw %>%
filter(blockcode != "practice",
trialcode != "instructions") %>%
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE)) %>%
group_by(subject) %>%
mutate(num_trials = n()) %>%
summarize(proportion_fast_trials_amp = mean(latency_prob),
total_trials = first(num_trials)) %>%
mutate(exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10 | total_trials != common_trial_count, "exclude", "include"))
# Brief Description:
# To determine the correct number of trials for the AMP task, I started by filtering out practice trials and instructions. I then counted the number of trials for each subject. By visualizing this distribution with a histogram, I could observe the pattern of trial counts across subjects. The mode of this distribution, which represents the most common trial count, was assumed to be the correct number. This value was then incorporated into the data processing code, marking subjects with an incorrect trial count for exclusion.
#
View(data_amp_performance_criteria)
data_amp_performance_criteria <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE)) |>
group_by(subject) |>
summarize(proportion_fast_trials_amp = mean(latency_prob)) |>
mutate(exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10, "exclude", "include"))
library(dplyr)
# Filter data for non-practice trials and count the number of trials for each subject
trial_counts <- data_amp_raw %>%
filter(blockcode != "practice",
trialcode != "instructions") %>%
group_by(subject) %>%
summarise(num_trials = n())
# Summary of trial counts
summary(trial_counts$num_trials)
library(ggplot2)
plot<- ggplot(trial_counts, aes(x=num_trials)) +
geom_histogram(binwidth=1) +
theme_minimal() +
labs(title="Distribution of AMP Task Trials per Subject",
x="Number of Trials",
y="Number of Subjects")
print(plot)
# 3. Identifying the Common Trial Count:
# By finding the mode, we can ascertain the most frequent trial count.
#
# R
# Copy code
common_trial_count <- as.numeric(names(which.max(table(trial_counts$num_trials))))
common_trial_count
data_amp_performance_criteria <- data_amp_raw %>%
filter(blockcode != "practice",
trialcode != "instructions") %>%
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE)) %>%
group_by(subject) %>%
mutate(num_trials = n()) %>%
summarize(proportion_fast_trials_amp = mean(latency_prob),
total_trials = first(num_trials)) %>%
mutate(exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10 | total_trials != common_trial_count, "exclude", "include"))
View(plot)
print(plot)
# Filter data for non-practice trials and count the number of trials for each subject
trial_counts <- data_amp_raw %>%
filter(blockcode != "practice",
trialcode != "instructions") %>%
group_by(subject) %>%
summarise(num_trials = n())
# Summary of trial counts
summary(trial_counts$num_trials)
library(ggplot2)
plot<- ggplot(trial_counts, aes(x=num_trials)) +
geom_histogram(binwidth=1) +
theme_minimal() +
labs(title="Distribution of AMP Task Trials per Subject",
x="Number of Trials",
y="Number of Subjects")
common_trial_count <- as.numeric(names(which.max(table(trial_counts$num_trials))))
common_trial_count
