knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidyverse)
library(janitor)
library(stringr)
library(openxlsx)
library(tidyverse)
library(janitor)
library(stringr)
library(openxlsx)
data_demographics <- read.csv("../data/raw/data_raw_demographics.csv") %>%
janitor::clean_names()
data_iat_raw <- read_csv("../data/raw/data_raw_iat.csv")  %>%
janitor::clean_names()
data_personality <- read_csv("../data/raw/data_raw_bfi.csv")  %>%
janitor::clean_names()
data_age_sex <- data_demographics  %>%
distinct(unique_id, variable, .keep_all = TRUE) %>%
pivot_wider(id_cols = unique_id,
names_from = variable,
values_from = response) %>%
mutate(unique_id = as.character(unique_id),
age = as.numeric(age),
sex = as.character(sex))
View(data_demographics)
View(data_age_sex)
#using recode to manually reverse all the neccessary items
data_personality_reversed <- data_personality %>%
mutate(bfi_e2 = recode(bfi_e2, "1" = 6, "2" = 5, "3" = 4, "4" = 3, "5" = 2, "6" = 1),
bfi_e5 = recode(bfi_e5, "1" = 6, "2" = 5, "3" = 4, "4" = 3, "5" = 2, "6" = 1),
bfi_e7 = recode(bfi_e7, "1" = 6, "2" = 5, "3" = 4, "4" = 3, "5" = 2, "6" = 1),
bfi_c2 = recode(bfi_c2, "1" = 6, "2" = 5, "3" = 4, "4" = 3, "5" = 2, "6" = 1),
bfi_c4 = recode(bfi_c4, "1" = 6, "2" = 5, "3" = 4, "4" = 3, "5" = 2, "6" = 1),
bfi_c5 = recode(bfi_c5, "1" = 6, "2" = 5, "3" = 4, "4" = 3, "5" = 2, "6" = 1),
bfi_c9 = recode(bfi_c9, "1" = 6, "2" = 5, "3" = 4, "4" = 3, "5" = 2, "6" = 1),
bfi_n2 = recode(bfi_n2, "1" = 6, "2" = 5, "3" = 4, "4" = 3, "5" = 2, "6" = 1),
bfi_n5 = recode(bfi_n5, "1" = 6, "2" = 5, "3" = 4, "4" = 3, "5" = 2, "6" = 1),
bfi_n7 = recode(bfi_n7, "1" = 6, "2" = 5, "3" = 4, "4" = 3, "5" = 2, "6" = 1),
bfi_a1 = recode(bfi_a1, "1" = 6, "2" = 5, "3" = 4, "4" = 3, "5" = 2, "6" = 1),
bfi_a3 = recode(bfi_a3, "1" = 6, "2" = 5, "3" = 4, "4" = 3, "5" = 2, "6" = 1),
bfi_a6 = recode(bfi_a6, "1" = 6, "2" = 5, "3" = 4, "4" = 3, "5" = 2, "6" = 1),
bfi_a8 = recode(bfi_a8, "1" = 6, "2" = 5, "3" = 4, "4" = 3, "5" = 2, "6" = 1),
bfi_o7 = recode(bfi_o7, "1" = 6, "2" = 5, "3" = 4, "4" = 3, "5" = 2, "6" = 1),
bfi_o9 = recode(bfi_o9, "1" = 6, "2" = 5, "3" = 4, "4" = 3, "5" = 2, "6" = 1),
unique_id = as.character(unique_id))
# Subset the dataset for extraversion items
extroversion_items <- data_personality_reversed %>%
select(starts_with("bfi_e"))
# Calculate the correlation matrix
correlation_extroversion <- cor(extroversion_items, use = "complete.obs")
# View the correlation matrix
print(correlation_extroversion)
# Check for any negative correlations
any_negative_correlations <- any(correlation_extroversion < 0)
# Print result of the check
print(any_negative_correlations)
#If any_negative_correlations returns TRUE for any subscale, it suggests there might be an issue with the item reversals or the data itself, and further investigation would be required.
# Subset the dataset for extraversion items
extroversion_items <- data_personality_reversed %>%
select(starts_with("bfi_c"))
# Calculate the correlation matrix
correlation_extroversion <- cor(extroversion_items, use = "complete.obs")
# View the correlation matrix
print(correlation_extroversion)
# Check for any negative correlations
any_negative_correlations <- any(correlation_extroversion < 0)
# Print result of the check
print(any_negative_correlations)
#If any_negative_correlations returns TRUE for any subscale, it suggests there might be an issue with the item reversals or the data itself, and further investigation would be required.
# Subset the dataset for extraversion items
extroversion_items <- data_personality_reversed %>%
select(starts_with("bfi_n"))
# Calculate the correlation matrix
correlation_extroversion <- cor(extroversion_items, use = "complete.obs")
# View the correlation matrix
print(correlation_extroversion)
# Check for any negative correlations
any_negative_correlations <- any(correlation_extroversion < 0)
# Print result of the check
print(any_negative_correlations)
#If any_negative_correlations returns TRUE for any subscale, it suggests there might be an issue with the item reversals or the data itself, and further investigation would be required.
# Subset the dataset for extraversion items
extroversion_items <- data_personality_reversed %>%
select(starts_with("bfi_a"))
# Calculate the correlation matrix
correlation_extroversion <- cor(extroversion_items, use = "complete.obs")
# View the correlation matrix
print(correlation_extroversion)
# Check for any negative correlations
any_negative_correlations <- any(correlation_extroversion < 0)
# Print result of the check
print(any_negative_correlations)
#If any_negative_correlations returns TRUE for any subscale, it suggests there might be an issue with the item reversals or the data itself, and further investigation would be required.
# Subset the dataset for extraversion items
extroversion_items <- data_personality_reversed %>%
select(starts_with("bfi_o"))
# Calculate the correlation matrix
correlation_extroversion <- cor(extroversion_items, use = "complete.obs")
# View the correlation matrix
print(correlation_extroversion)
# Check for any negative correlations
any_negative_correlations <- any(correlation_extroversion < 0)
# Print result of the check
print(any_negative_correlations)
#If any_negative_correlations returns TRUE for any subscale, it suggests there might be an issue with the item reversals or the data itself, and further investigation would be required.
# Check if any item is outside the range 1 to 6 and is not NA
data_personality_reversed_criteria_exclude <- data_personality_reversed %>%
rowwise() %>%
mutate(exclude = ifelse(any(c_across(starts_with("bfi_")) < 1 |
c_across(starts_with("bfi_")) > 6, na.rm = TRUE), "exclude", "include")) %>%
ungroup()
##na.rm = TRUE ensures that missing values (NA) are ignored in this calculation.
# View the first few rows of the modified dataset
head(data_personality)
library(tidyverse)
# Function to check for missing values in a scale and create an exclusion flag
check_and_flag_missing_data <- function(data, scale_prefix) {
scale_items <- select(data, starts_with(scale_prefix))
flag <- ifelse(rowSums(is.na(scale_items)) > 0, "exclude", "include")
return(flag)
}
# Apply the function to each BFI scale and add exclusion flags to the dataset
data_combined <- data_personality_reversed_criteria_exclude %>%
mutate(
complete_criteria_a = check_and_flag_missing_data(., "BFI_a"),
complete_criteria_c = check_and_flag_missing_data(., "BFI_c"),
complete_criteria_e = check_and_flag_missing_data(., "BFI_e"),
complete_criteria_n = check_and_flag_missing_data(., "BFI_n"),
complete_criteria_o = check_and_flag_missing_data(., "BFI_o")  # Explicitly checking for BFI_o
)
# View the first few rows of the modified dataset
head(data_combined)
# Subset the dataset for extraversion items
extroversion_items <- data_personality_reversed %>%
select(starts_with("bfi_o"))
# Calculate the correlation matrix
correlation_extroversion <- cor(extroversion_items, use = "complete.obs")
# View the correlation matrix
print(correlation_extroversion)
# Check for any negative correlations
any_negative_correlations <- any(correlation_extroversion < 0)
# Print result of the check
print(any_negative_correlations)
#If any_negative_correlations returns TRUE for any subscale, it suggests there might be an issue with the item reversals or the data itself, and further investigation would be required.
View(correlation_extroversion)
# Print result of the check
print(any_negative_correlations)
# Print result of the check
print(any_negative_correlations)
#If any_negative_correlations returns TRUE for any subscale, it suggests there might be an issue with the item reversals or the data itself, and further investigation would be required.
```
# Check for any negative correlations
any_negative_correlations <- any(correlation_extroversion < 0)
# Print result of the check
print(any_negative_correlations)
# Subset the dataset for extraversion items
extroversion_items <- data_personality_reversed %>%
select(starts_with("bfi_o"))
# Calculate the correlation matrix
correlation_extroversion <- cor(extroversion_items, use = "complete.obs")
# View the correlation matrix
print(correlation_extroversion)
# Check for any negative correlations
any_negative_correlations <- any(correlation_extroversion < 0)
# Print result of the check
print(any_negative_correlations)
View(correlation_extroversion)
# Print result of the check
print(any_negative_correlations)
# View the correlation matrix
print(correlation_extroversion)
# Check if any item is outside the range 1 to 6 and is not NA
data_personality_reversed_criteria_exclude <- data_personality_reversed %>%
rowwise() %>%
mutate(exclude = ifelse(any(c_across(starts_with("bfi_")) < 1 |
c_across(starts_with("bfi_")) > 6, na.rm = TRUE), "exclude", "include")) %>%
ungroup()
##na.rm = TRUE ensures that missing values (NA) are ignored in this calculation.
# View the first few rows of the modified dataset
head(data_personality)
# Function to check for missing values in a scale and create an exclusion flag
check_and_flag_missing_data <- function(data, scale_prefix) {
scale_items <- select(data, starts_with(scale_prefix))
flag <- ifelse(rowSums(is.na(scale_items)) > 0, "exclude", "include")
return(flag)
}
# Apply the function to each BFI scale and add exclusion flags to the dataset
data_combined <- data_personality_reversed_criteria_exclude %>%
mutate(
complete_criteria_a = check_and_flag_missing_data(., "BFI_a"),
complete_criteria_c = check_and_flag_missing_data(., "BFI_c"),
complete_criteria_e = check_and_flag_missing_data(., "BFI_e"),
complete_criteria_n = check_and_flag_missing_data(., "BFI_n"),
complete_criteria_o = check_and_flag_missing_data(., "BFI_o")  # Explicitly checking for BFI_o
)
# View the first few rows of the modified dataset
head(data_combined)
bfi_scores <- data_combined %>%
rowwise() %>%
mutate(
agreeableness_mean = ifelse(complete_criteria_a == "include", mean(c_across(starts_with("BFI_a")), na.rm = TRUE), NA),
conscientiousness_mean = ifelse(complete_criteria_c == "include", mean(c_across(starts_with("BFI_c")), na.rm = TRUE), NA),
extraversion_mean = ifelse(complete_criteria_e == "include", mean(c_across(starts_with("BFI_e")), na.rm = TRUE), NA),
neuroticism_mean = ifelse(complete_criteria_n == "include", mean(c_across(starts_with("BFI_n")), na.rm = TRUE), NA),
openness_mean = ifelse(complete_criteria_o == "include", mean(c_across(starts_with("BFI_o")), na.rm = TRUE), NA)
) %>%
ungroup()
View(data_personality_reversed)
if(!file.exists("../data/processed/data_processed_codebook.xlsx")){
# convert the column names to a df
codebook_template <- data.frame(variable = colnames(data_processed)) |>
mutate(explanation = NA)
# write to disk as an excel file
write.xlsx(codebook_template, file = "../data/processed/data_processed_codebook.xlsx")
}
# Function to check for missing values in a scale and create an exclusion flag
check_and_flag_missing_data <- function(data, scale_prefix) {
scale_items <- select(data, starts_with(scale_prefix))
flag <- ifelse(rowSums(is.na(scale_items)) > 0, "exclude", "include")
return(flag)
}
# Apply the function to each BFI scale and add exclusion flags to the dataset
data_combined <- data_personality_reversed_criteria_exclude %>%
mutate(
complete_criteria_a = check_and_flag_missing_data(., "BFI_a"),
complete_criteria_c = check_and_flag_missing_data(., "BFI_c"),
complete_criteria_e = check_and_flag_missing_data(., "BFI_e"),
complete_criteria_n = check_and_flag_missing_data(., "BFI_n"),
complete_criteria_o = check_and_flag_missing_data(., "BFI_o")  # Explicitly checking for BFI_o
)
# View the first few rows of the modified dataset
head(data_combined)
bfi_scores <- data_combined %>%
rowwise() %>%
mutate(
agreeableness_mean = ifelse(complete_criteria_a == "include", mean(c_across(starts_with("BFI_a")), na.rm = TRUE), NA),
conscientiousness_mean = ifelse(complete_criteria_c == "include", mean(c_across(starts_with("BFI_c")), na.rm = TRUE), NA),
extraversion_mean = ifelse(complete_criteria_e == "include", mean(c_across(starts_with("BFI_e")), na.rm = TRUE), NA),
neuroticism_mean = ifelse(complete_criteria_n == "include", mean(c_across(starts_with("BFI_n")), na.rm = TRUE), NA),
openness_mean = ifelse(complete_criteria_o == "include", mean(c_across(starts_with("BFI_o")), na.rm = TRUE), NA)
) %>%
ungroup()
# View the modified dataset
head(data_combined)
# Calculate the overall mean for each BFI subscale
overall_means <- bfi_scores %>%
summarize(
overall_mean_agreeableness = mean(agreeableness_mean, na.rm = TRUE),
overall_mean_conscientiousness = mean(conscientiousness_mean, na.rm = TRUE),
overall_mean_extraversion = mean(extraversion_mean, na.rm = TRUE),
overall_mean_neuroticism = mean(neuroticism_mean, na.rm = TRUE),
overall_mean_openness = mean(openness_mean, na.rm = TRUE)
)
# View the overall mean scores
overall_means
#liket scale ranging from 1 to 6
min_possible_score <- 1
max_possible_score <- 6
# Check if any mean scores violate the min and max possible scores
violations <- bfi_scores %>%
summarize(
violation_in_agreeableness = any(agreeableness_mean < min_possible_score | agreeableness_mean > max_possible_score, na.rm = TRUE),
violation_in_conscientiousness = any(conscientiousness_mean < min_possible_score | conscientiousness_mean > max_possible_score, na.rm = TRUE),
violation_in_extraversion = any(extraversion_mean < min_possible_score | extraversion_mean > max_possible_score, na.rm = TRUE),
violation_in_neuroticism = any(neuroticism_mean < min_possible_score | neuroticism_mean > max_possible_score, na.rm = TRUE),
violation_in_openness = any(openness_mean < min_possible_score | openness_mean > max_possible_score, na.rm = TRUE)
)
# View the violations
violations
#liket scale ranging from 1 to 6
minimal_possible_score <- 1
maximal_possible_score <- 6
# Check if any mean scores violate the min and max possible scores
violations <- bfi_scores %>%
summarize(
violation_in_agreeableness = any(agreeableness_mean < minimal_possible_score | agreeableness_mean > maximal_possible_score, na.rm = TRUE),
violation_in_conscientiousness = any(conscientiousness_mean < minimal_possible_score | conscientiousness_mean > maximal_possible_score, na.rm = TRUE),
violation_in_extraversion = any(extraversion_mean < minimal_possible_score | extraversion_mean > maximal_possible_score, na.rm = TRUE),
violation_in_neuroticism = any(neuroticism_mean < minimal_possible_score | neuroticism_mean > maximal_possible_score, na.rm = TRUE),
violation_in_openness = any(openness_mean < minimal_possible_score | openness_mean > maximal_possible_score, na.rm = TRUE)
)
# View the violations
violations
# Load your dataset and convert necessary columns to numeric
data_iat <- data_iat_raw %>%
mutate(
block = as.numeric(as.character(block)),
participant = as.numeric(as.character(participant)),
reaction_time = as.numeric(as.character(x6)),
accuracy = x5
) %>%
# Ensure that blocks and accuracy are as expected
filter(block %in% c(3, 4, 6, 7), accuracy == "correct") %>%
select(participant, block, reaction_time)
# Calculate the "D" score using the specified blocks
iat_d_scores <- data_iat %>%
group_by(participant) %>%
# Calculate means and SD within one summarise call
summarize(
mean1 = mean(reaction_time[block %in% c(3, 6)], na.rm = TRUE),
mean2 = mean(reaction_time[block %in% c(4, 7)], na.rm = TRUE),
SD = sd(reaction_time[block %in% c(3, 4, 6, 7)], na.rm = TRUE),
.groups = 'drop'  # This ensures the data is ungrouped after summarize
) %>%
# Calculate the D score immediately after summarising
mutate(D = (mean2 - mean1) / SD)
# View the resulting scores
iat_d_scores
