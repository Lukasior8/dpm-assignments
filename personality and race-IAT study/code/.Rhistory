mutate(age = as.numeric(age)) |>
# Calculate the mean and standard deviation (SD) of the 'age' column, ignoring NA values
summarise(Mean = mean(age, na.rm = TRUE),
SD = sd(age, na.rm = TRUE)) |>
# Round all the values in the dataset to 1 decimal place
mutate_all(.funs = janitor::round_half_up, digits = 1) |>
# Convert the data to a nicely formatted table using the 'kable' function
kable() |>
# Add a header above the table with the title "Age" spanning 2 columns
add_header_above(header = c("Age" = 2)) |>
# Apply a classic table style to the kable output, without full width
kable_classic(full_width = FALSE)
# Next section of the code
# Again, take the dataset 'data_processed_after_exclusions'
data_processed_after_exclusions |>
# Group the data by the 'sex' column
group_by(sex) |>
# Summarise the data to count the number of occurrences in each group
summarise(n = n()) |>
# Calculate the percentage of each sex, round it to 1 decimal place, and append a '%' sign
mutate(Percent = paste0(round_half_up((n / sum(n)) * 100, 1), "%")) |>
# Capitalize the first letter of each value in the 'sex' column
mutate(sex = stringr::str_to_sentence(sex)) |>
# Convert the data to a nicely formatted table using the 'kable' function
kable() |>
# Apply a classic table style to the kable output, without full width
kable_classic(full_width = FALSE)
# Agreeableness:
alpha(subset(data_processed_after_exclusions, select = c(bfi_a1, bfi_a2, bfi_a3, bfi_a4,
bfi_a5, bfi_a6, bfi_a7, bfi_a8,
bfi_a9)), check.keys = TRUE)
# Conscientiousness:
alpha(subset(data_processed_after_exclusions, select = c(bfi_c1, bfi_c2, bfi_c3, bfi_c4,
bfi_c5, bfi_c6, bfi_c7, bfi_c8,
bfi_c9)), check.keys = TRUE)
# Extraversion:
alpha(subset(data_processed_after_exclusions, select = c(bfi_e1, bfi_e2, bfi_e3, bfi_e4,
bfi_e5, bfi_e6, bfi_e7, bfi_e8)),
check.keys = TRUE)
# Neuroticism:
alpha(subset(data_processed_after_exclusions, select = c(bfi_n1, bfi_n2, bfi_n3, bfi_n4,
bfi_n5, bfi_n6, bfi_n7, bfi_n8)),
check.keys = TRUE)
# Opennes:
alpha(subset(data_processed_after_exclusions, select = c(bfi_o1, bfi_o2, bfi_o3, bfi_o4,
bfi_o5, bfi_o6, bfi_o7, bfi_o8,
bfi_o9, bfi_o10)), check.keys = TRUE)
#Histograms for all the BFI- Subscales
library(ggplot2)
ggplot(data_processed_after_exclusions, aes(x=agreeableness_mean)) +
geom_histogram(binwidth = 0.25, fill="blue", color="black") +
labs(title="Histogram of Agreeableness Mean", x="Agreeableness Mean", y="Count") +
scale_x_continuous(limits = c(1, 6), breaks=1:6)
# Histogram for conscientiousness_mean
ggplot(data_processed_after_exclusions, aes(x=conscientiousness_mean)) +
geom_histogram(binwidth = 0.25, fill="blue", color="black") +
labs(title="Histogram of Conscientiousness Mean", x="Conscientiousness Mean", y="Count") +
scale_x_continuous(limits = c(1, 6), breaks=1:6)
# Histogram for extraversion
ggplot(data_processed_after_exclusions, aes(x=extraversion_mean)) +
geom_histogram(binwidth = 0.25, fill="blue", color="black") +
labs(title="Histogram of extraversion Mean", x="extraversion Mean", y="Count") +
scale_x_continuous(limits = c(1, 6), breaks=1:6)
# Histogram for neuroticism
ggplot(data_processed_after_exclusions, aes(x=neuroticism_mean)) +
geom_histogram(binwidth = 0.25, fill="blue", color="black") +
labs(title="Histogram of neuroticism Mean", x="neuroticism Mean", y="Count") +
scale_x_continuous(limits = c(1, 6), breaks=1:6)
# Histogram for openness
ggplot(data_processed_after_exclusions, aes(x=openness_mean)) +
geom_histogram(binwidth = 0.25, fill="blue", color="black") +
labs(title="Histogram of openness Mean", x="openness Mean", y="Count") +
scale_x_continuous(limits = c(1, 6), breaks=1:6)
library(ggplot2)
ggplot(data_processed_after_exclusions, aes(x=D)) +
geom_histogram(binwidth = 0.1, fill="blue", color="black", na.rm = TRUE) +
labs(title="Histogram of IAT-D-Score Distribution", x="D-Score", y="Count") +
scale_x_continuous(
limits = c(-2, 2),
breaks = seq(-2, 2, by = 0.25))
# Load the necessary library
library(Hmisc)
# Subset the dataframe to include only the relevant variables
data_correlation <- data_processed_after_exclusions[c("D", "agreeableness_mean", "conscientiousness_mean", "extraversion_mean", "neuroticism_mean", "openness_mean")]
# Use the cor function with the method "pearson" and use the use="pairwise.complete.obs"
# to ensure that only pairwise complete observations are used for each correlation
cor_matrix <- cor(data_correlation, method = "pearson", use = "pairwise.complete.obs")
# Round the correlation matrix to two decimal places
cor_matrix_rounded <- round(cor_matrix, 2)
# Print the correlation matrix
print(cor_matrix_rounded)
# Install and load the report package
if (!requireNamespace("report", quietly = TRUE)) {
install.packages("report")
}
library(report)
# Run the t-test
t_test_result <- t.test(D ~ sex, data = data_processed_after_exclusions)
# Generate a report
report_result <- report(t_test_result)
# Print the report
print(report_result)
# List of BFI subscales
bfi_subscales <- c("agreeableness_mean", "conscientiousness_mean", "extraversion_mean", "neuroticism_mean", "openness_mean")
# Loop through each BFI subscale and run a regression
for (subscale in bfi_subscales) {
regression_formula <- as.formula(paste("D ~", subscale))
regression_result <- lm(regression_formula, data = data_processed_after_exclusions)
# Report the results
report_result <- report(regression_result)
print(paste("Regression result for", subscale, ":"))
print(report_result)
}
library(ggplot2)
library(dplyr)
library(gridExtra)
# Identify the top and bottom 10% of IAT scores
threshold_high <- quantile(data_processed_after_exclusions$D, 0.9, na.rm = TRUE)
threshold_low <- quantile(data_processed_after_exclusions$D, 0.1, na.rm = TRUE)
# Create a new column for shape
data_processed_after_exclusions$shape <- ifelse(data_processed_after_exclusions$D >= threshold_high | data_processed_after_exclusions$D <= threshold_low, "triangle", "circle")
# List of BFI subscales
bfi_subscales <- c("agreeableness_mean", "conscientiousness_mean", "extraversion_mean", "neuroticism_mean", "openness_mean")
# Create a list to store plots
plots_list <- list()
# Generate plots for each subscale
for (subscale in bfi_subscales) {
p <- ggplot(data_processed_after_exclusions, aes_string(x=subscale, y="D", shape="shape")) +
geom_jitter(width = 0.1, height = 0, size = 2.5, alpha = 0.6) +
geom_smooth(method="lm", se=FALSE, aes(group = 1)) +
labs(
title=paste("IAT scores vs", subscale),
x=subscale,
y="IAT Score",
caption = "Note: Points have been jittered horizontally for visualization purposes, extreme values are represented by triangles."
) +
scale_shape_manual(values=c(circle=16, triangle=17)) +
theme(legend.position = "none")
plots_list[[subscale]] <- p
}
# Combine the plots into a single plot
combined_plot <- do.call(grid.arrange, c(plots_list, ncol=1))
# Save the plot
ggsave("bfi_iat_relationship.png", combined_plot, width = 10, height = 30)
ggsave("bfi_iat_relationship.pdf", combined_plot, width = 10, height = 30)
# Print the plot for the HTML file
print(combined_plot)
#Note: The Png and PDF version of the plots look way better than what is printed in here, so check those.
# Install and load the patchwork package if you haven't already
if (!requireNamespace("patchwork", quietly = TRUE)) {
install.packages("patchwork")
}
library(patchwork)
# Identify the top and bottom 10% of IAT scores
threshold_high <- quantile(data_processed_after_exclusions$D, 0.9, na.rm = TRUE)
threshold_low <- quantile(data_processed_after_exclusions$D, 0.1, na.rm = TRUE)
# Create a new column for shape
data_processed_after_exclusions$shape <- ifelse(data_processed_after_exclusions$D >= threshold_high | data_processed_after_exclusions$D <= threshold_low, "triangle", "circle")
# List of BFI subscales
bfi_subscales <- c("agreeableness_mean", "conscientiousness_mean", "extraversion_mean", "neuroticism_mean", "openness_mean")
# Create a list to store plots
plots_list <- list()
# Generate plots for each subscale
for (subscale in bfi_subscales) {
p <- ggplot(data_processed_after_exclusions, aes_string(x=subscale, y="D", shape="shape")) +
geom_jitter(width = 0.1, height = 0, size = 2.5, alpha = 0.6) +
geom_smooth(method="lm", se=FALSE, aes(group = 1)) +
labs(
title=paste("IAT scores vs", subscale),
x=subscale,
y="IAT Score",
caption = "Note: Points have been jittered horizontally for visualization purposes, extreme values are represented by triangles."
) +
scale_shape_manual(values=c(circle=16, triangle=17)) +
theme(legend.position = "none")
plots_list[[subscale]] <- p
}
# Combine the plots into a single plot using patchwork
combined_plot <- patchwork::wrap_plots(plots_list, ncol = 1)
# Print the combined plot for the R Markdown (.Rmd) and HTML file
print(combined_plot)
# Save the combined plot to the "communications" folder as .pdf and .png
ggsave("../communications/bfi_iat_relationship.png", combined_plot, width = 10, height = 30)
ggsave("../communications/bfi_iat_relationship.pdf", combined_plot, width = 10, height = 30)
#Note: The Png and PDF version of the plots look way better than what is printed in here, so check those.
# This line of code calls the 'sessionInfo()' function in R, which displays information about the current R session, including the R version, operating system, and loaded packages and their versions.
sessionInfo()
data("penguins")
#The data originates from a long-term biological study on penguins at the Palmer Station in Antarctica, and is available in the free dataset of the R Studio library palmerpenguins.
# Raincloud Plot
GoodPenguinPlot <- penguins %>%
na.omit() %>%
# Initialize a ggplot with species on the x-axis, body_mass_g on the y-axis, and fill color based on species
ggplot(aes(x = species, y = body_mass_g, fill = species)) +
# Add a violin plot layer: untrimmed for full data representation, semi-transparent, with black outlines
geom_violin(trim = FALSE, alpha = 0.5, color = "black") +
# Add a boxplot layer: narrow width, no outliers, transparent fill, black outlines
geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0, color = "black") +
# Add jittered points using quasirandom placement to prevent overplotting, colored by species
geom_quasirandom(aes(color = species), size = 1, alpha = 0.8) +
# Apply the viridis color scale for the fill (nice for printing/colourblind people)
scale_fill_viridis(discrete = TRUE) +
# Apply the viridis color scale for the point colors
scale_color_viridis(discrete = TRUE) +
# Set the plot title and axis labels
labs(x = "Species", y = "Weight (g)", title = "Penguin Species and Body Mass Distribution") +
# Apply a minimalistic theme for a cleaner look
theme_minimal()+
# Remove the legend, because it would be redundant
theme(legend.position = "none")
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(magick)
library(palmerpenguins)
library(tidyverse)
library(ggplot2)
library(datasets)
library(ggbeeswarm)
library(viridis)
library(grid)
library(ggimage)
library(imager)
library(ggmagnify)
library(viridis)
data("penguins")
#The data originates from a long-term biological study on penguins at the Palmer Station in Antarctica, and is available in the free dataset of the R Studio library palmerpenguins.
# Raincloud Plot
GoodPenguinPlot <- penguins %>%
na.omit() %>%
# Initialize a ggplot with species on the x-axis, body_mass_g on the y-axis, and fill color based on species
ggplot(aes(x = species, y = body_mass_g, fill = species)) +
# Add a violin plot layer: untrimmed for full data representation, semi-transparent, with black outlines
geom_violin(trim = FALSE, alpha = 0.5, color = "black") +
# Add a boxplot layer: narrow width, no outliers, transparent fill, black outlines
geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0, color = "black") +
# Add jittered points using quasirandom placement to prevent overplotting, colored by species
geom_quasirandom(aes(color = species), size = 1, alpha = 0.8) +
# Apply the viridis color scale for the fill (nice for printing/colourblind people)
scale_fill_viridis(discrete = TRUE) +
# Apply the viridis color scale for the point colors
scale_color_viridis(discrete = TRUE) +
# Set the plot title and axis labels
labs(x = "Species", y = "Weight (g)", title = "Penguin Species and Body Mass Distribution") +
# Apply a minimalistic theme for a cleaner look
theme_minimal()+
# Remove the legend, because it would be redundant
theme(legend.position = "none")
GoodPenguinPlot
library(magick)
library(tidyverse)
library(ggplot2)
library(datasets)
library(ggbeeswarm)
library(viridis)
library(grid)
library(ggmagnify)
library(viridis)
# Load the packages
library(ggplot2)
library(gapminder)
# Load the Gapminder dataset
data(gapminder)
# Create the raincloud plot
ggplot(gapminder, aes(x = continent, y = gdpPercap, fill = continent)) +
geom_violin(trim = FALSE) +
geom_jitter(width = 0.2, size = 1, alpha = 0.5) +
scale_fill_brewer(palette = "Dark2") +
theme_minimal() +
theme(legend.position = "none") +
ylab("GDP per Capita") +
xlab("Continent")
ggsave("combined_plot.pdf", plot = last_plot(), dpi = 300)
#tobi bad plot shit
# Load the packages
library(magick)
library(tidyverse)
library(ggplot2)
library(datasets)
library(ggbeeswarm)
library(viridis)
library(grid)
library(ggmagnify)
library(viridis)
# Load the packages
library(ggplot2)
library(gapminder)
install.packages(gapminder)
install.packages(gapminder)
install.packages("gapminder")
library(gapminder)
# Load the Gapminder dataset
data(gapminder)
# Create the raincloud plot
ggplot(gapminder, aes(x = continent, y = gdpPercap, fill = continent)) +
geom_violin(trim = FALSE) +
geom_jitter(width = 0.2, size = 1, alpha = 0.5) +
scale_fill_brewer(palette = "Dark2") +
theme_minimal() +
theme(legend.position = "none") +
ylab("GDP per Capita") +
xlab("Continent")
# Load the Gapminder dataset
data(gapminder)
force(gapminder)
# Create the raincloud plot
ggplot(gapminder, aes(x = continent, y = gdpPercap, fill = continent)) +
geom_violin(trim = FALSE) +
geom_jitter(width = 0.2, size = 1, alpha = 0.5) +
scale_fill_brewer(palette = "Dark2") +
theme_minimal() +
theme(legend.position = "none") +
ylab("GDP per Capita") +
xlab("Continent")
background_picture <- image_read("capitapicture.png")
knitr::opts_chunk$set(echo = TRUE)
# Load the packages
library(magick)
library(tidyverse)
library(ggplot2)
library(datasets)
library(ggbeeswarm)
library(viridis)
library(grid)
library(ggmagnify)
library(viridis)
library(ggplot2)
library(gapminder)
# Load the Gapminder dataset
data(gapminder)
# Create the raincloud plot with separate colors for each country and a note
ggplot(gapminder, aes(x = continent, y = gdpPercap, fill = continent)) + # Initialize ggplot with gapminder data, mapping aesthetics
geom_violin(trim = FALSE) + # Add violin plot for each continent (density distribution of GDP)
geom_jitter(aes(color = country), width = 0.2, size = 1, alpha = 0.5) + # Add jittered points with separate colors for each country
scale_color_brewer(palette = "Set3") + # Use a different color palette for country points
scale_fill_brewer(palette = "Dark2") + # Use 'Dark2' color palette for violin plot
theme_minimal() + # Apply a minimalistic theme
theme(legend.position = "none") + # Remove the legend
ylab("GDP per Capita") + # Label for y-axis
xlab("Continent") + # Label for x-axis
ggtitle("Comparison of GDP per Capita Across Continents") + # Add a descriptive title
annotate("text", x = Inf, y = Inf, label = "Note: Points are jittered for clarity", hjust = 1.1, vjust = 2, size = 3) # Add a note about jittered points
# Load the packages
# Load the necessary packages
library(ggplot2)
library(datasets)
library(gapminder)
# Load the Gapminder dataset
data(gapminder)
# Create the raincloud plot with same colors for each continent
ggplot(gapminder, aes(x = continent, y = gdpPercap, fill = continent)) +
geom_violin(trim = FALSE) +
geom_jitter(aes(color = continent), width = 0.2, size = 1, alpha = 0.5) + # Color dots by continent
scale_color_brewer(palette = "Set3") +
scale_fill_brewer(palette = "Dark2") +
theme_minimal() +
theme(legend.position = "none") +
ylab("GDP per Capita") +
xlab("Continent") +
ggtitle("Comparison of GDP per Capita Across Continents") +
annotate("text", x = Inf, y = Inf, label = "Note: Points are jittered for clarity", hjust = 1.1, vjust = 2, size = 3)
# Load the packages
# Load the necessary packages
# Load the necessary packages
library(ggplot2)
library(dplyr)
library(gapminder)
# Load the Gapminder dataset
data(gapminder)
# Calculate mean GDP per Capita for each continent
mean_gdp <- gapminder %>%
group_by(continent) %>%
summarize(mean_gdpPercap = mean(gdpPercap))
# Load the necessary packages
library(ggplot2)
library(dplyr)
library(gapminder)
# Load the Gapminder dataset
data(gapminder)
# Calculate the mean GDP per Capita for each continent
mean_gdp <- gapminder %>%
group_by(continent) %>%
summarize(mean_gdpPercap = mean(gdpPercap, na.rm = TRUE)) # ensure NA values are removed
# Load the necessary packages
library(ggplot2)
library(dplyr)
library(gapminder)
# Load the Gapminder dataset
data(gapminder)
# Calculate the mean GDP per Capita for each continent
mean_gdp <- gapminder %>%
group_by(continent) %>%
summarise(mean_gdpPercap = mean(gdpPercap, na.rm = TRUE)) # ensure NA values are removed
# Create the raincloud plot with more breaks and mean GDP annotations
ggplot(gapminder, aes(x = continent, y = gdpPercap, fill = continent)) +
geom_violin(trim = FALSE) +
geom_jitter(aes(color = continent), width = 0.2, size = 1, alpha = 0.5) +
scale_color_brewer(palette = "Set3") +
scale_fill_brewer(palette = "Dark2") +
scale_y_continuous(breaks = seq(0, max(gapminder$gdpPercap, na.rm = TRUE), by = 10000)) + # More breaks on the y-axis
theme_minimal() +
theme(legend.position = "none") +
ylab("GDP per Capita") +
xlab("Continent") +
ggtitle("Comparison of GDP per Capita Across Continents") +
annotate("text", x = Inf, y = Inf, label = "Note: Points are jittered for clarity", hjust = 1.1, vjust = 2, size = 3) +
geom_text(data = mean_gdp, aes(x = continent, y = mean_gdpPercap, label = round(mean_gdpPercap, 2)), vjust = -0.5) # Add mean GDP text
# Load the necessary packages
library(ggplot2)
library(dplyr)
library(gapminder)
# Load the Gapminder dataset
data(gapminder)
# Calculate the mean GDP per Capita for each continent
mean_gdp <- gapminder %>%
group_by(continent) %>%
summarize(mean_gdpPercap = mean(gdpPercap, na.rm = TRUE)) # Ensure NA values are removed
# Load the necessary packages
library(ggplot2)
library(dplyr)
library(gapminder)
# Load the Gapminder dataset
data(gapminder)
# Calculate the mean GDP per Capita for each continent
mean_gdp <- gapminder %>%
group_by(continent) %>%
summarise(mean_gdpPercap = mean(gdpPercap, na.rm = TRUE)) # Ensure NA values are removed
# Create the raincloud plot with adjusted mean GDP annotations
ggplot(gapminder, aes(x = continent, y = gdpPercap, fill = continent)) +
geom_violin(trim = FALSE) +
geom_jitter(aes(color = continent), width = 0.2, size = 1, alpha = 0.5) +
scale_color_brewer(palette = "Set3") +
scale_fill_brewer(palette = "Dark2") +
scale_y_continuous(breaks = seq(0, max(gapminder$gdpPercap, na.rm = TRUE), by = 10000)) + # More breaks on the y-axis
theme_minimal() +
theme(legend.position = "none") +
ylab("GDP per Capita") +
xlab("Continent") +
ggtitle("Comparison of GDP per Capita Across Continents") +
annotate("text", x = Inf, y = Inf, label = "Note: Points are jittered for clarity", hjust = 1.1, vjust = 2, size = 3) +
geom_text(data = mean_gdp, aes(x = continent, y = mean_gdpPercap - 10000, label = round(mean_gdpPercap, 2)), vjust = -0.5) # Adjust mean GDP text position
# Load the necessary packages
library(ggplot2)
library(dplyr)
library(gapminder)
# Load the Gapminder dataset
data(gapminder)
# Calculate the mean GDP per Capita for each continent
mean_gdp <- gapminder %>%
group_by(continent) %>%
summarise(mean_gdpPercap = mean(gdpPercap, na.rm = TRUE)) # Ensure NA values are removed
# Create the raincloud plot with adjusted mean GDP annotations
ggplot(gapminder, aes(x = continent, y = gdpPercap, fill = continent)) +
geom_violin(trim = FALSE) +
geom_jitter(aes(color = continent), width = 0.2, size = 1, alpha = 0.5) +
scale_color_brewer(palette = "Set3") +
scale_fill_brewer(palette = "Dark2") +
scale_y_continuous(breaks = seq(0, max(gapminder$gdpPercap, na.rm = TRUE), by = 10000)) + # More breaks on the y-axis
theme_minimal() +
theme(legend.position = "none") +
ylab("GDP per Capita") +
xlab("Continent") +
ggtitle("Comparison of GDP per Capita Across Continents") +
annotate("text", x = Inf, y = Inf, label = "Note: Points are jittered for clarity", hjust = 1.1, vjust = 2, size = 3) +
geom_text(data = mean_gdp, aes(x = continent, y =  - 20000, label = round(mean_gdpPercap, 2)), vjust = -0.5) # Adjust mean GDP text position
# Load the necessary packages
library(ggplot2)
library(dplyr)
library(gapminder)
# Load the Gapminder dataset
data(gapminder)
# Calculate the mean GDP per Capita for each continent
mean_gdp <- gapminder %>%
group_by(continent) %>%
summarise(mean_gdpPercap = mean(gdpPercap, na.rm = TRUE)) # Ensure NA values are removed
# Create the raincloud plot with adjusted mean GDP annotations
ggplot(gapminder, aes(x = continent, y = gdpPercap, fill = continent)) +
geom_violin(trim = FALSE) +
geom_jitter(aes(color = continent), width = 0.2, size = 1, alpha = 0.5) +
scale_color_brewer(palette = "Set3") +
scale_fill_brewer(palette = "Dark2") +
scale_y_continuous(breaks = seq(0, max(gapminder$gdpPercap, na.rm = TRUE), by = 10000)) + # More breaks on the y-axis
theme_minimal() +
theme(legend.position = "none") +
ylab("GDP per Capita") +
xlab("Continent") +
ggtitle("Comparison of GDP per Capita Across Continents") +
annotate("text", x = Inf, y = Inf, label = "Note: Points are jittered for clarity", hjust = 1.1, vjust = 2, size = 3) +
geom_text(data = mean_gdp, aes(x = continent, y = -20000, label = paste("Mean:", round(mean_gdpPercap, 2))), vjust = -0.5) # Adjust mean GDP text position with label
# Load the necessary packages
library(ggplot2)
library(dplyr)
library(gapminder)
# Load the Gapminder dataset
data(gapminder)
# Calculate the mean GDP per Capita for each continent
mean_gdp <- gapminder %>%
group_by(continent) %>%
summarise(mean_gdpPercap = mean(gdpPercap, na.rm = TRUE)) # Ensure NA values are removed
# Create the raincloud plot with smaller mean GDP annotations
ggplot(gapminder, aes(x = continent, y = gdpPercap, fill = continent)) +
geom_violin(trim = FALSE) +
geom_jitter(aes(color = continent), width = 0.2, size = 1, alpha = 0.5) +
scale_color_brewer(palette = "Set3") +
scale_fill_brewer(palette = "Dark2") +
scale_y_continuous(breaks = seq(0, max(gapminder$gdpPercap, na.rm = TRUE), by = 10000)) + # More breaks on the y-axis
theme_minimal() +
theme(legend.position = "none") +
ylab("GDP per Capita") +
xlab("Continent") +
ggtitle("Comparison of GDP per Capita Across Continents") +
annotate("text", x = Inf, y = Inf, label = "Note: Points are jittered for clarity", hjust = 1.1, vjust = 2, size = 3) +
geom_text(data = mean_gdp, aes(x = continent, y = -20000, label = paste("Mean:", round(mean_gdpPercap, 2))), size = 2.5, vjust = -0.5) # Adjust mean GDP text position with smaller text
